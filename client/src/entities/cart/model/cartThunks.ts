import { createAsyncThunk } from '@reduxjs/toolkit';
import CartService from '../api/CartService';
import type { CartItemCheckT, CartItemValidationResponseT } from './cartTypes';
import { type NewCartItemT, type UpdateCartItemT } from './cartTypes';
import { cartItemCheckArraySchema, guestCartItemArraySchem } from './cartSchema';

export const getCart = createAsyncThunk('cart/getCart', () => CartService.getOrCreateCart());

export const deleteCart = createAsyncThunk('cart/deleteCart', () => CartService.deleteCart());

export const getCartItems = createAsyncThunk('cart/getCartItems', () => CartService.getCartItems());

export const addCartItem = createAsyncThunk('cart/addCartItem', async (item: NewCartItemT) => {
  const response = await CartService.addCartItem(item);
  return response;
});

export const updateCartItem = createAsyncThunk(
  'cart/updateCartItem',
  ({ itemId, updateData }: { itemId: number; updateData: UpdateCartItemT }) =>
    CartService.updateCartItem(itemId, updateData),
);

export const deleteCartItem = createAsyncThunk('cart/deleteCartItem', (itemId: number) =>
  CartService.deleteCartItem(itemId),
);

export const transferGuestCartToServer = createAsyncThunk(
  'cart/transferGuestCartToServer',
  async (_, { dispatch }) => {
    try {
      const guestCart = localStorage.getItem('guestCart');
      if (!guestCart) {
        console.log('üõí localStorage.guestCart –ø—É—Å—Ç–æ–π');
        return;
      }

      const parsed = guestCartItemArraySchem.safeParse(JSON.parse(guestCart));

      if (!parsed.success || parsed.data.length === 0) {
        console.log('guestCart –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –∏–ª–∏ –ø—É—Å—Ç–æ–π');
        return;
      }

      const items = parsed.data.map((item) => ({
        productId: item.productId,
        quantity: item.quantity,
        price: item.price,
      }));
      console.log('üõí –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–æ–≤–∞—Ä—ã –Ω–∞ —Å–µ—Ä–≤–µ—Ä:', items);

      await CartService.createCartWithItems(items);

      console.log('‚úÖ –ö–æ—Ä–∑–∏–Ω–∞ —É—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ–Ω–µ—Å–µ–Ω–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä, –æ—á–∏—â–∞–µ–º localStorage');
      localStorage.removeItem('guestCart');
      console.log('üõí localStorage.guestCart –æ—á–∏—â–µ–Ω');
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–Ω–æ—Å–µ –∫–æ—Ä–∑–∏–Ω—ã:', error);
    }
  },
);

export const checkCartItems = createAsyncThunk<CartItemValidationResponseT, CartItemCheckT[]>(
  'cart/checkCartItems',
  async (cartItems) => {
    const parsed = cartItemCheckArraySchema.safeParse(cartItems);

    if (!parsed.success) {
      throw new Error('–ù–µ–≤–µ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–æ—Ä–∑–∏–Ω—ã');
    }

    const response = await CartService.checkCartItems(parsed.data);
    return response;
  },
);
